---
title: 入社してからの2ヶ月で学んだgitのbranchの使い方
date: '2015-06-27'
tags:
- diary
- git
- github
- programming
published: false
---

<h2>はじめに</h2>
<p>
    会社のコーディングルールとかじゃなくて、あくまでも僕の見解なのでマサカリがいっぱい飛んでくる。
</p>

<h2>gitのbranch</h2>
<p>    
    git大好きプログラマの皆さんは、さすがに自分一人でやってる趣味プロジェクトでもない限り、複数のbranchを切り替えて作業しているものと思います。git-flowやGitHub flowを取り入れているプロジェクトもあるでしょう。
</p>
<p>
    さて、僕が業務でgitを使うようになって2ヶ月が経ち、いろいろとgitの使い方、特にbranchの使い方で学びがあったので書きます。驚くべき事実はないです。
</p>

<h2>前提条件</h2>
<p>
    <ul>
<li>チームでの開発での知見(チーム開発以外で使えないということではない)</li>
<li>gitのスキルは様々(SourceTree使ってる人がいたり、CUI主体だったり)</li>
    </ul>
</p>

<h2>branch戦略</h2>
<h3>origin master HEADからbranchを切る</h3>
<p>
    その時点での最新のmasterから切ります。理由は、conflictを最小限にとどめ。fast-fowardできるようにするためです。そうでなくても、手元のmasterは出来る限りorigin/masterから離れないようにします。手癖のように<code>git pull origin master</code>します。
</p>

<h3>GitHub上でbranchをmergeする</h3>
<p>
    僕はfast-fowardが大好きです。なぜならGitHubのPullRequest上でmergeできるからです。手元でコマンド叩いてmergeとか怖いのでしたくないです。conflict解消？怖いのでしたくないです。
</p>

<h3>fast-fowardできなければrebase</h3>

